English Learning System Documentation
📋 PROJECT OVERVIEW
Project Name: EnglishMaster (or any name of your choice)
 Target Audience: From beginners to advanced learners
 Goal: A complete English learning platform that helps users master grammar, vocabulary, and pronunciation interactively.
🎯 Core Features
Interactive lessons (grammar, vocabulary, pronunciation)


Gamification (points, streaks, leaderboards) (optional)


Speech recognition


Progress tracking


Multiple question types (MCQs, fill-in-the-blanks, audio questions)


Daily challenges


Certificate generation



🎯 PHASE-WISE BREAKDOWN
PHASE 1: Basic Frontend & Backend Development (oct 14-25, 2025) 🚀
🎯 PHASE 1 DELIVERABLES (Dec 25, 2024)
✅ Working Frontend (Next.js 14 + TypeScript + Tailwind)
✅ Django Backend with API endpoints
✅ Basic Authentication System
✅ Database Models & Migrations
✅ Basic Lesson System (Group 0 - 20 levels)
✅ Progress Tracking
✅ Responsive Design

1.1 Requirements Gathering
Define user personas (students, professionals, kids)


Design the learning path (Group 0–Group 7) - 8 Groups Total
- Group 0: 20 levels (Basic/Starting level)
- Groups 1-7: 50 levels each (Advanced levels)
- Total: 370 levels across all groups


Prioritize core features for MVP


1.2 Tech Stack Selection (Updated for Django)
Frontend: Next.js 14 (CONFIRMED) 🎯
Next.js 14 (for SEO support & App Router)


TypeScript (for type safety)
Tailwind CSS (for styling)


Framer Motion (for animations)


Zustand (for state management)


React Query (for API handling)


Shadcn/ui (for components)


Backend:
Django 5.0 (for AI/ML capabilities)


Django REST Framework (for API)


Django CORS Headers (for frontend integration)


Celery (for background tasks)


Django Channels (for real-time features)


Database:
PostgreSQL (for structured data)


Redis (for caching & Celery)


Additional Services:
AWS S3 / Cloudinary (for media storage)


OpenAI API (for AI-powered feedback)


Web Speech API (for speech recognition)


Django Allauth (for authentication)


1.3 Design System
Create UI/UX design in Figma


Color Scheme: Bright and engaging (Duolingo-style)


Responsive Design: Mobile-first approach


Component Library: Shadcn/ui + Tailwind



👥 3 DEVELOPERS WORK DIVISION (Phase 1)

🔵 DEVELOPER 1: Frontend Lead (Next.js 14 + UI/UX) 🎯
Responsibilities:
- Next.js 14 setup with TypeScript (CONFIRMED)
- Tailwind CSS + Shadcn/ui components
- Authentication pages (Login/Register)
- Dashboard & Lesson pages
- Responsive design implementation
- State management with Zustand
- App Router implementation

🔴 DEVELOPER 2: Backend Lead (Django + API)
Responsibilities:
- Django 5.0 project setup
- Database models & migrations
- REST API endpoints
- Authentication system (Django Allauth)
- User management & permissions
- API documentation

🟢 DEVELOPER 3: Full-stack Support (Integration + Content)
Responsibilities:
- Frontend-Backend integration
- API calls & data flow
- Basic A1 lesson content creation
- Progress tracking implementation
- Testing & debugging
- Deployment setup

📅 PHASE 1 TIMELINE (Dec 14-25, 2024) - 7 DAYS SPRINT

Day 1 (oct 14): Project Setup
- Repository setup, tech stack finalization
- Next.js 14 frontend initialization
- Django backend project setup

Day 2 (oct 15): Database & Models
- Database design & Django models
- User authentication models
- Lesson & Exercise models

Day 3 (oct 16): Authentication System
- Django authentication setup
- Next.js auth pages (Login/Register)
- API integration for auth

Day 4 (oct 17): Lesson System
- Basic lesson system & API endpoints
- Frontend lesson pages
- Exercise components

Day 5 (oct 18): Progress Tracking
- Progress tracking implementation
- Dashboard with stats
- A1 content creation

Day 6 (oct 19): Integration & Testing
- Frontend-Backend integration
- Testing & debugging
- UI/UX polish

Day 7 (oct 20): Final Deploy
- Final testing & deployment
- Documentation
- Demo preparation

2.1 Frontend Setup (Developer 1)

# Next.js 14 with TypeScript
npx create-next-app@latest englishmaster --typescript --tailwind --eslint --app

# Install essential packages
npm install zustand @tanstack/react-query
npm install framer-motion lucide-react
npm install recharts howler
npm install @radix-ui/react-slot class-variance-authority
npm install clsx tailwind-merge

Frontend Folder Structure:
src/
├── app/
│   ├── (auth)/
│   │   ├── login/
│   │   └── register/
│   ├── dashboard/
│   ├── lessons/
│   └── profile/
├── components/
│   ├── ui/ (Shadcn components)
│   ├── common/
│   ├── lessons/
│   └── dashboard/
├── lib/
│   ├── utils.ts
│   ├── api.ts
│   └── auth.ts
├── store/
│   └── useAuthStore.ts
└── types/
    └── index.ts

2.2 Backend Setup (Developer 2)

# Django project setup
django-admin startproject englishmaster_backend
cd englishmaster_backend
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

# Install packages
pip install django djangorestframework
pip install django-cors-headers django-allauth
pip install celery redis
pip install psycopg2-binary
pip install pillow python-decouple

# Create apps
python manage.py startapp accounts
python manage.py startapp lessons
python manage.py startapp progress

Django Project Structure:
englishmaster_backend/
├── manage.py
├── englishmaster_backend/
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── accounts/
│   ├── models.py
│   ├── views.py
│   ├── serializers.py
│   └── urls.py
├── lessons/
│   ├── models.py
│   ├── views.py
│   ├── serializers.py
│   └── urls.py
├── progress/
│   ├── models.py
│   ├── views.py
│   ├── serializers.py
│   └── urls.py
└── requirements.txt


PHASE 3: Django Database Models (Week 1-2)

# accounts/models.py (Developer 2)
from django.contrib.auth.models import AbstractUser
from django.db import models

class User(AbstractUser):
    GROUP_CHOICES = [
        ('0', 'Group 0 - Basic (20 levels)'),
        ('1', 'Group 1 - Elementary (50 levels)'),
        ('2', 'Group 2 - Pre-Intermediate (50 levels)'),
        ('3', 'Group 3 - Intermediate (50 levels)'),
        ('4', 'Group 4 - Upper Intermediate (50 levels)'),
        ('5', 'Group 5 - Advanced (50 levels)'),
        ('6', 'Group 6 - Proficient (50 levels)'),
        ('7', 'Group 7 - Expert (50 levels)'),
    ]
    
    current_group = models.CharField(max_length=1, choices=GROUP_CHOICES, default='0')
    current_level = models.IntegerField(default=1)  # Level within current group (1-20 for Group 0, 1-50 for others)
    current_streak = models.IntegerField(default=0)
    longest_streak = models.IntegerField(default=0)
    total_xp = models.IntegerField(default=0)
    last_active = models.DateTimeField(auto_now=True)
    daily_goal = models.IntegerField(default=10)
    notifications_enabled = models.BooleanField(default=True)
    sound_effects = models.BooleanField(default=True)
    
    def __str__(self):
        return self.username

# lessons/models.py (Developer 2)
class Group(models.Model):
    group_number = models.IntegerField(unique=True)  # 0-7
    name = models.CharField(max_length=100)
    description = models.TextField()
    total_levels = models.IntegerField()  # 20 for Group 0, 50 for others
    is_unlocked = models.BooleanField(default=False)
    unlock_requirement = models.TextField(blank=True)  # Requirements to unlock this group
    
    def __str__(self):
        return f"Group {self.group_number} - {self.name}"

class Level(models.Model):
    group = models.ForeignKey(Group, on_delete=models.CASCADE, related_name='levels')
    level_number = models.IntegerField()  # 1-20 for Group 0, 1-50 for others
    title = models.CharField(max_length=200)
    description = models.TextField()
    is_locked = models.BooleanField(default=True)
    xp_reward = models.IntegerField(default=10)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['group', 'level_number']
        ordering = ['group', 'level_number']
    
    def __str__(self):
        return f"Group {self.group.group_number} - Level {self.level_number}: {self.title}"

class GroupJumpTest(models.Model):
    """Test required to jump to a higher group"""
    target_group = models.ForeignKey(Group, on_delete=models.CASCADE, related_name='jump_tests')
    test_name = models.CharField(max_length=200)
    description = models.TextField()
    passing_score = models.IntegerField(default=100)  # 100% required
    total_questions = models.IntegerField(default=20)
    time_limit = models.IntegerField(default=30)  # minutes
    is_active = models.BooleanField(default=True)
    
    def __str__(self):
        return f"Jump Test for Group {self.target_group.group_number}"

class Exercise(models.Model):
    EXERCISE_TYPES = [
        ('mcq', 'Multiple Choice Question'),
        ('text_to_speech', 'Text to Speech (Pronunciation)'),
        ('fill_blank', 'Fill in the Blank'),
        ('synonyms', 'Synonyms'),
        ('antonyms', 'Antonyms'),
        ('listening', 'Listening Comprehension'),
        ('translation', 'Translation'),
        ('matching', 'Picture Matching'),
        ('construction', 'Sentence Construction'),
    ]
    
    level = models.ForeignKey(Level, on_delete=models.CASCADE, related_name='exercises')
    exercise_type = models.CharField(max_length=20, choices=EXERCISE_TYPES)
    question = models.TextField()
    options = models.JSONField(default=list, blank=True)
    correct_answer = models.JSONField()
    audio_url = models.URLField(blank=True, null=True)
    image_url = models.URLField(blank=True, null=True)
    hint = models.TextField(blank=True)
    explanation = models.TextField(blank=True)
    difficulty = models.IntegerField(default=1)  # 1-5 scale
    xp_value = models.IntegerField(default=5)
    order_in_level = models.IntegerField(default=1)  # 1-6 (6 questions per level)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['level', 'order_in_level']
    
    def __str__(self):
        return f"Group {self.level.group.group_number} - Level {self.level.level_number} - Q{self.order_in_level}: {self.get_exercise_type_display()}"

# progress/models.py (Developer 3)
class UserProgress(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='progress')
    level = models.ForeignKey(Level, on_delete=models.CASCADE, related_name='user_progress')
    exercise = models.ForeignKey(Exercise, on_delete=models.CASCADE, related_name='user_progress')
    is_completed = models.BooleanField(default=False)
    score = models.FloatField(default=0.0)
    attempts = models.IntegerField(default=0)
    time_spent = models.IntegerField(default=0)  # in seconds
    completed_at = models.DateTimeField(null=True, blank=True)
    mistakes = models.JSONField(default=list, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['user', 'exercise']
    
    def __str__(self):
        return f"{self.user.username} - Group {self.level.group.group_number} Level {self.level.level_number}"

class GroupJumpTestAttempt(models.Model):
    """Track user attempts at group jump tests"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='jump_test_attempts')
    test = models.ForeignKey(GroupJumpTest, on_delete=models.CASCADE, related_name='attempts')
    score = models.IntegerField(default=0)
    passed = models.BooleanField(default=False)
    completed_at = models.DateTimeField(null=True, blank=True)
    time_taken = models.IntegerField(default=0)  # in seconds
    answers = models.JSONField(default=list)  # Store user answers
    
    def __str__(self):
        return f"{self.user.username} - {self.test.test_name} - {'PASSED' if self.passed else 'FAILED'}"

class Vocabulary(models.Model):
    PART_OF_SPEECH_CHOICES = [
        ('noun', 'Noun'),
        ('verb', 'Verb'),
        ('adjective', 'Adjective'),
        ('adverb', 'Adverb'),
        ('preposition', 'Preposition'),
        ('conjunction', 'Conjunction'),
        ('interjection', 'Interjection'),
    ]
    
    word = models.CharField(max_length=100, unique=True)
    pronunciation = models.CharField(max_length=200, blank=True)
    part_of_speech = models.CharField(max_length=20, choices=PART_OF_SPEECH_CHOICES)
    definition = models.TextField()
    example_sentence = models.TextField()
    audio_url = models.URLField(blank=True, null=True)
    group = models.CharField(max_length=1, choices=User.GROUP_CHOICES)
    category = models.CharField(max_length=50, blank=True)
    synonyms = models.JSONField(default=list, blank=True)
    antonyms = models.JSONField(default=list, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.word


PHASE 4: Phase 1 API Endpoints & Features

🔗 API ENDPOINTS (Developer 2 & 3)

Authentication Endpoints:
POST /api/auth/register/ - User registration
POST /api/auth/login/ - User login
POST /api/auth/logout/ - User logout
GET /api/auth/user/ - Get current user
PUT /api/auth/user/ - Update user profile

Group & Level Endpoints:
GET /api/groups/ - Get all groups
GET /api/groups/{id}/ - Get specific group
GET /api/groups/{id}/levels/ - Get all levels in a group
GET /api/levels/{id}/ - Get specific level
GET /api/levels/{id}/exercises/ - Get level exercises (6 questions)
POST /api/levels/{id}/start/ - Start a level

Exercise Endpoints:
GET /api/exercises/{id}/ - Get specific exercise
POST /api/exercises/{id}/submit/ - Submit exercise answer
GET /api/exercises/types/ - Get available exercise types

Progress Endpoints:
GET /api/progress/ - Get user progress
GET /api/progress/level/{id}/ - Get level progress
POST /api/progress/update/ - Update progress
GET /api/progress/stats/ - Get progress statistics

Group Jump Test Endpoints:
GET /api/tests/jump/{group_id}/ - Get group jump test
POST /api/tests/jump/{group_id}/attempt/ - Submit test attempt
GET /api/tests/jump/attempts/ - Get user's test attempts

Vocabulary Endpoints:
GET /api/vocabulary/ - Get vocabulary words
GET /api/vocabulary/group/{group_id}/ - Get words by group
POST /api/vocabulary/practice/ - Practice vocabulary

🎯 PHASE 1 CONTENT FOCUS (Group 0 - 20 Levels)

Group 0 Content (Developer 3):
- Basic greetings & introductions
- Present tense (am/is/are)
- Common nouns (family, colors, numbers)
- Basic vocabulary (~100 words)
- Simple sentence construction
- Basic listening exercises

Content Structure per Level (6 Questions):
1. MCQ (Multiple Choice Question)
2. Text-to-Speech (Pronunciation practice)
3. Fill in the Blank
4. Synonyms
5. Antonyms
6. Listening Comprehension

Total Structure:
- Group 0: 20 levels × 6 questions = 120 questions
- Groups 1-7: 50 levels each × 6 questions = 300 questions per group
- Total: 2,220 questions across all groups

4.2 Content Resources
Free:
Oxford 3000 Word List


Cambridge English Corpus


Tatoeba.org (sentences)


Forvo.com (pronunciation)


News API (reading practice)


Paid (optional):
OpenAI API


Google Text-to-Speech


Professional voice recordings



PHASE 5: Core Features Development
5.1 Authentication System (Week 4)
Features:
Email/Password sign-up


{% comment %} Google/Facebook login {% endcomment %}


Email verification & password reset


JWT authentication


// Backend - authController.js
const register = async (req, res) => {
  // Hash password
  // Create user
  // Send verification email
  // Return JWT token
}

5.2 Lesson System (Week 5–6)
Exercise types include:
Multiple Choice


Fill-in-the-Blanks


Listening


Speaking


Translation


Picture Matching


Sentence Construction


5.3 Gamification System (Week 7)
Features: XP points, streaks, achievements, leaderboards, lives system, power-ups.
5.4 Progress Tracking (Week 8)
Features:
Daily goal charts


Weekly activity heatmap


Lesson completion %


Strengths & weaknesses analysis



PHASE 6: UI/UX Implementation (Week 9–10)
Key Pages:
Home, Dashboard, Lesson, Profile, Practice Mode





Animations:
Confetti on completion


Shake on wrong answer


Smooth transitions



PHASE 7: Advanced Features (Week 11–14)
7.1 AI Integration
OpenAI API for grammar correction, essay evaluation, and chat practice


7.2 Speech Recognition
Using Web Speech API:
const recognition = new webkitSpeechRecognition();
recognition.lang = 'en-US';
recognition.onresult = (event) => {
  const transcript = event.results[0][0].transcript;
};

7.3 Social Features
Friend system


Challenges


Forums and groups



PHASE 8: Testing & Deployment (Week 15–16)
Testing: Unit, Integration, UAT, and Performance
 Deployment:
Frontend → Vercel / Netlify


Backend → AWS / Render / Railway


Database → MongoDB Atlas / AWS RDS


CI/CD → GitHub Actions / Jenkins



📚 LEARNING RESOURCES
Frontend: React Docs, Tailwind Labs, Redux Toolkit Tutorials
 Backend: Traversy Media, Node.js Docs, MongoDB University
 System Design: Gaurav Sen, System Design Primer
 Extra: Duolingo Clone Tutorials (YouTube)

🎯 BEST PRACTICES
Use ESLint + Prettier


Git branching and meaningful commits


Secure environment variables


Prevent XSS/SQL Injection


Optimize images, lazy load, caching



📅 UPDATED TIMELINE FOR 3 DEVELOPERS

Phase 1 (oct 14-25, 2025): Basic MVP - 7 DAYS SPRINT
Duration: 7 days
Description: A1 lessons, basic auth, progress tracking
Team: 3 developers
Deliverable: Working Next.js web app with A1 content

Phase 2 (oct 26 - Dec 15, 2025): Enhanced Features  
Duration: 7 weeks
Description: A2-B1 lessons, gamification, AI features
Team: 3 developers
Deliverable: Full learning platform

Phase 3 (Dec 16 - Feb 15, 2025): Advanced Features
Duration: 8 weeks  
Description: B2-C2 levels, social features, mobile app
Team: 3 developers + 1 mobile dev
Deliverable: Complete product

🛠️ PHASE 1 DETAILED ACTION PLAN (7 DAYS SPRINT)

Day 1 (oct 14): Foundation
- Repository setup, tech stack finalization
- Next.js 14 frontend initialization
- Django backend project initialization
- Group structure planning (0-7 groups)

Day 2 (oct 15): Database & Models
- Database design & Django models
- User authentication models
- Group, Level & Exercise models

Day 3 (Dec 21): Authentication System
- Django authentication setup
- Next.js auth pages (Login/Register)
- API integration for auth
- Group jump test system setup

Day 4 (Dec 22): Level System
- Basic level system & API endpoints
- Frontend level pages
- Exercise components (6 questions per level)

Day 5 (Dec 23): Progress Tracking
- Progress tracking implementation
- Dashboard with stats
- Group 0 content creation (20 levels × 6 questions = 120 questions)

Day 6 (Dec 24): Integration & Testing
- Frontend-Backend integration
- Group jump test functionality
- Testing & debugging
- UI/UX polish

Day 7 (Dec 25): Final Deploy
- Final testing & deployment
- Group jump test validation
- Documentation
- Demo preparation

🚀 DEPLOYMENT STRATEGY (Phase 1)

Frontend: Vercel (automatic deployments)
Backend: Railway or Render (Django support)
Database: PostgreSQL on Railway/Render
Media Storage: Cloudinary (free tier)
Domain: Custom domain setup



💡 PRO TIPS
Start small (MVP first)


Gather user feedback


Focus on high-quality content


Design for mobile users


Track analytics early


Build a community (Discord/Telegram)


Open-source for portfolio exposure



🎁 BONUS: Vocabulary Database Sample
A1–C2 vocabulary database structure ready for direct use.
 (Include English word, definition, example, audio, synonyms, antonyms, etc.)

🎯 FINAL RECOMMENDATIONS FOR 3 DEVELOPERS

✅ OPTIMIZED TEAM STRUCTURE:
Frontend Dev (Developer 1): Next.js + TypeScript + UI/UX
Backend Dev (Developer 2): Django + API + Database
Full-stack Dev (Developer 3): Integration + Content + Testing

✅ PHASE 1 SUCCESS FACTORS:
- Daily standup meetings (15 mins)
- Use GitHub for version control
- Test-driven development approach
- Mobile-first responsive design
- Focus on Group 0 (20 levels) only for Phase 1

✅ COMMUNICATION STRATEGY:
- Slack/Discord for daily communication
- GitHub Issues for task tracking
- Figma for design collaboration
- Regular code reviews

✅ TECHNICAL DEBT MANAGEMENT:
- Write clean, documented code
- Use TypeScript for type safety
- Implement proper error handling
- Set up automated testing



Document Maintained By:
 Rao Faizan Raza



