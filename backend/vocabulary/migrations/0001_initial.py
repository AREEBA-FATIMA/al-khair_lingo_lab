# Generated by Django 5.2.7 on 2025-10-21 17:38

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Vocabulary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(help_text='English word', max_length=100, unique=True)),
                ('translation_urdu', models.CharField(help_text='Urdu translation', max_length=200)),
                ('pronunciation', models.CharField(blank=True, help_text='Phonetic pronunciation (IPA or simple)', max_length=100)),
                ('oxford_rank', models.PositiveIntegerField(blank=True, help_text='Oxford 3000 word frequency rank (1-3000)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3000)])),
                ('is_oxford_3000', models.BooleanField(default=False, help_text='Is this word in Oxford 3000 list?')),
                ('difficulty_level', models.CharField(choices=[('A1', 'A1 - Beginner'), ('A2', 'A2 - Elementary'), ('B1', 'B1 - Intermediate'), ('B2', 'B2 - Upper Intermediate'), ('C1', 'C1 - Advanced'), ('C2', 'C2 - Proficiency')], default='A1', help_text='CEFR difficulty level', max_length=2)),
                ('part_of_speech', models.CharField(choices=[('noun', 'Noun'), ('verb', 'Verb'), ('adjective', 'Adjective'), ('adverb', 'Adverb'), ('pronoun', 'Pronoun'), ('preposition', 'Preposition'), ('conjunction', 'Conjunction'), ('interjection', 'Interjection'), ('determiner', 'Determiner'), ('auxiliary', 'Auxiliary Verb')], help_text='Grammatical category', max_length=20)),
                ('definition', models.TextField(help_text='English definition')),
                ('definition_urdu', models.TextField(blank=True, help_text='Urdu definition')),
                ('example_sentence', models.TextField(help_text='Example sentence in English')),
                ('example_sentence_urdu', models.TextField(blank=True, help_text='Example sentence in Urdu')),
                ('audio_url', models.URLField(blank=True, help_text='Audio pronunciation URL', max_length=500, null=True)),
                ('image_url', models.URLField(blank=True, help_text='Visual representation URL', max_length=500, null=True)),
                ('synonyms', models.JSONField(blank=True, default=list, help_text='List of synonyms')),
                ('antonyms', models.JSONField(blank=True, default=list, help_text='List of antonyms')),
                ('common_phrases', models.JSONField(blank=True, default=list, help_text='Common phrases using this word')),
                ('collocations', models.JSONField(blank=True, default=list, help_text='Common word combinations')),
                ('difficulty_score', models.FloatField(default=1.0, help_text='Subjective difficulty score (1.0-10.0)', validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(10.0)])),
                ('learning_frequency', models.PositiveIntegerField(default=0, help_text='How often this word appears in lessons')),
                ('is_active', models.BooleanField(default=True, help_text='Is this word active?')),
                ('is_essential', models.BooleanField(default=False, help_text='Is this an essential word for basic communication?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_vocabulary', to=settings.AUTH_USER_MODEL)),
                ('related_words', models.ManyToManyField(blank=True, help_text='Related vocabulary words', to='vocabulary.vocabulary')),
            ],
            options={
                'verbose_name': 'Vocabulary Word',
                'verbose_name_plural': 'Vocabulary Words',
                'ordering': ['oxford_rank', 'word'],
            },
        ),
        migrations.CreateModel(
            name='VocabularyProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_learned', models.BooleanField(default=False, help_text='Has user learned this word?')),
                ('mastery_level', models.PositiveIntegerField(default=0, help_text='Mastery level (0-5, 5 = perfect mastery)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('next_review_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When to review this word next')),
                ('review_interval_days', models.PositiveIntegerField(default=1, help_text='Days between reviews')),
                ('review_count', models.PositiveIntegerField(default=0, help_text='Number of times reviewed')),
                ('correct_count', models.PositiveIntegerField(default=0, help_text='Number of correct answers')),
                ('incorrect_count', models.PositiveIntegerField(default=0, help_text='Number of incorrect answers')),
                ('first_learned_at', models.DateTimeField(blank=True, null=True)),
                ('last_reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('average_response_time', models.FloatField(default=0.0, help_text='Average time to answer (seconds)')),
                ('personal_difficulty', models.FloatField(default=1.0, help_text='Personal difficulty for this user', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vocabulary_progress', to=settings.AUTH_USER_MODEL)),
                ('vocabulary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='vocabulary.vocabulary')),
            ],
            options={
                'verbose_name': 'Vocabulary Progress',
                'verbose_name_plural': 'Vocabulary Progress',
                'ordering': ['next_review_date'],
            },
        ),
        migrations.AddIndex(
            model_name='vocabulary',
            index=models.Index(fields=['oxford_rank'], name='vocabulary__oxford__6a5890_idx'),
        ),
        migrations.AddIndex(
            model_name='vocabulary',
            index=models.Index(fields=['difficulty_level'], name='vocabulary__difficu_fe92b1_idx'),
        ),
        migrations.AddIndex(
            model_name='vocabulary',
            index=models.Index(fields=['part_of_speech'], name='vocabulary__part_of_5c339a_idx'),
        ),
        migrations.AddIndex(
            model_name='vocabulary',
            index=models.Index(fields=['is_oxford_3000'], name='vocabulary__is_oxfo_090f89_idx'),
        ),
        migrations.AddIndex(
            model_name='vocabulary',
            index=models.Index(fields=['is_active'], name='vocabulary__is_acti_dd34b4_idx'),
        ),
        migrations.AddIndex(
            model_name='vocabularyprogress',
            index=models.Index(fields=['user', 'vocabulary'], name='vocabulary__user_id_c8903f_idx'),
        ),
        migrations.AddIndex(
            model_name='vocabularyprogress',
            index=models.Index(fields=['next_review_date'], name='vocabulary__next_re_661c69_idx'),
        ),
        migrations.AddIndex(
            model_name='vocabularyprogress',
            index=models.Index(fields=['mastery_level'], name='vocabulary__mastery_e76403_idx'),
        ),
        migrations.AddIndex(
            model_name='vocabularyprogress',
            index=models.Index(fields=['is_learned'], name='vocabulary__is_lear_aa4226_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vocabularyprogress',
            unique_together={('user', 'vocabulary')},
        ),
    ]
