# Generated by Django 5.2.7 on 2025-10-16 11:12

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TestExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Test name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Test description')),
                ('test_type', models.CharField(choices=[('comprehensive', 'Comprehensive Test'), ('grammar', 'Grammar Test'), ('vocabulary', 'Vocabulary Test'), ('listening', 'Listening Test'), ('reading', 'Reading Test'), ('writing', 'Writing Test'), ('speaking', 'Speaking Test')], default='comprehensive', help_text='Type of test', max_length=20)),
                ('target_level_range_start', models.PositiveIntegerField(default=1, help_text='Starting level for this test')),
                ('target_level_range_end', models.PositiveIntegerField(default=10, help_text='Ending level for this test')),
                ('difficulty', models.PositiveIntegerField(choices=[(1, 'Beginner'), (2, 'Elementary'), (3, 'Intermediate'), (4, 'Upper Intermediate'), (5, 'Advanced')], default=1, help_text='Test difficulty level', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('questions_count', models.PositiveIntegerField(default=20, help_text='Number of questions in test', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(50)])),
                ('pass_percentage', models.PositiveIntegerField(default=80, help_text='Required percentage to pass', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(100)])),
                ('time_limit_minutes', models.PositiveIntegerField(default=30, help_text='Time limit in minutes', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(120)])),
                ('xp_reward', models.PositiveIntegerField(default=50, help_text='XP reward for passing test', validators=[django.core.validators.MinValueValidator(1)])),
                ('badge_name', models.CharField(blank=True, help_text='Badge name for passing test', max_length=100)),
                ('badge_description', models.TextField(blank=True, help_text='Badge description')),
                ('is_active', models.BooleanField(default=True, help_text='Is test active?')),
                ('is_required', models.BooleanField(default=True, help_text='Is test required to proceed?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Test Exercise',
                'verbose_name_plural': 'Test Exercises',
                'ordering': ['target_level_range_start', 'difficulty'],
            },
        ),
        migrations.CreateModel(
            name='TestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned'), ('timeout', 'Timeout')], default='in_progress', help_text='Status of the attempt', max_length=20)),
                ('score', models.PositiveIntegerField(default=0, help_text='Total score achieved')),
                ('total_questions', models.PositiveIntegerField(default=0, help_text='Total questions')),
                ('correct_answers', models.PositiveIntegerField(default=0, help_text='Correct answers')),
                ('percentage', models.FloatField(default=0.0, help_text='Percentage score')),
                ('passed', models.BooleanField(default=False, help_text='Did user pass the test?')),
                ('time_taken_seconds', models.PositiveIntegerField(default=0, help_text='Time taken in seconds')),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When test was started')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When test was completed', null=True)),
                ('xp_earned', models.PositiveIntegerField(default=0, help_text='XP earned')),
                ('badge_earned', models.BooleanField(default=False, help_text='Did user earn badge?')),
                ('user_answers', models.JSONField(default=dict, help_text="User's answers for each question")),
                ('feedback', models.TextField(blank=True, help_text='Test feedback')),
                ('recommendations', models.TextField(blank=True, help_text='Study recommendations')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_attempts', to=settings.AUTH_USER_MODEL)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='tests.testexercise')),
            ],
            options={
                'verbose_name': 'Test Attempt',
                'verbose_name_plural': 'Test Attempts',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='TestQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='The question text')),
                ('question_type', models.CharField(choices=[('mcq', 'Multiple Choice Question'), ('text_to_speech', 'Text to Speech (Pronunciation)'), ('fill_blank', 'Fill in the Blank'), ('synonyms', 'Synonyms'), ('antonyms', 'Antonyms'), ('sentence_completion', 'Sentence Completion'), ('listening', 'Listening Comprehension'), ('reading', 'Reading Comprehension'), ('writing', 'Writing Exercise'), ('grammar', 'Grammar Exercise'), ('essay', 'Essay Writing'), ('speaking', 'Speaking Exercise')], help_text='Type of question', max_length=30)),
                ('options', models.JSONField(blank=True, help_text='Options for MCQ questions', null=True)),
                ('correct_answer', models.JSONField(blank=True, help_text='Correct answer(s)', null=True)),
                ('audio_url', models.URLField(blank=True, help_text='Audio file URL', max_length=500, null=True)),
                ('image_url', models.URLField(blank=True, help_text='Image URL', max_length=500, null=True)),
                ('hint', models.TextField(blank=True, help_text='Hint for the question')),
                ('explanation', models.TextField(blank=True, help_text='Explanation of correct answer')),
                ('difficulty', models.PositiveIntegerField(default=1, help_text='Question difficulty', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('points', models.PositiveIntegerField(default=1, help_text='Points for correct answer', validators=[django.core.validators.MinValueValidator(1)])),
                ('question_order', models.PositiveIntegerField(default=1, help_text='Order of question in test', validators=[django.core.validators.MinValueValidator(1)])),
                ('time_limit_seconds', models.PositiveIntegerField(default=60, help_text='Time limit in seconds', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(600)])),
                ('is_active', models.BooleanField(default=True, help_text='Is question active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_test_questions', to=settings.AUTH_USER_MODEL)),
                ('test', models.ForeignKey(help_text='Test this question belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='tests.testexercise')),
            ],
            options={
                'verbose_name': 'Test Question',
                'verbose_name_plural': 'Test Questions',
                'ordering': ['test', 'question_order'],
            },
        ),
        migrations.AddIndex(
            model_name='testexercise',
            index=models.Index(fields=['target_level_range_start'], name='tests_teste_target__485c49_idx'),
        ),
        migrations.AddIndex(
            model_name='testexercise',
            index=models.Index(fields=['test_type'], name='tests_teste_test_ty_395b75_idx'),
        ),
        migrations.AddIndex(
            model_name='testexercise',
            index=models.Index(fields=['difficulty'], name='tests_teste_difficu_32697d_idx'),
        ),
        migrations.AddIndex(
            model_name='testexercise',
            index=models.Index(fields=['is_active'], name='tests_teste_is_acti_ab8bf4_idx'),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['user', 'test'], name='tests_testa_user_id_a9b45d_idx'),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['started_at'], name='tests_testa_started_e0bee0_idx'),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['status'], name='tests_testa_status_ebfe54_idx'),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['passed'], name='tests_testa_passed_47382a_idx'),
        ),
        migrations.AddIndex(
            model_name='testquestion',
            index=models.Index(fields=['test', 'question_order'], name='tests_testq_test_id_23ec7d_idx'),
        ),
        migrations.AddIndex(
            model_name='testquestion',
            index=models.Index(fields=['question_type'], name='tests_testq_questio_01ca89_idx'),
        ),
        migrations.AddIndex(
            model_name='testquestion',
            index=models.Index(fields=['difficulty'], name='tests_testq_difficu_3e79c1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='testquestion',
            unique_together={('test', 'question_order')},
        ),
    ]
