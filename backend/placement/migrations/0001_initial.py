# Generated by Django 5.2.7 on 2025-10-21 17:38

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('groups', '0001_initial'),
        ('levels', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PlacementTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Test name (e.g., 'Beginner Track Completion Test')", max_length=255)),
                ('description', models.TextField(blank=True, help_text='Test description and purpose')),
                ('test_type', models.CharField(choices=[('beginner_exit', 'Beginner Track Exit Test'), ('intermediate_exit', 'Intermediate Track Exit Test'), ('advanced_exit', 'Advanced Track Exit Test'), ('initial_placement', 'Initial Placement Test'), ('level_skip', 'Level Skip Test')], help_text='Type of placement test', max_length=30)),
                ('difficulty_level', models.CharField(choices=[('A1', 'A1 - Beginner'), ('A2', 'A2 - Elementary'), ('B1', 'B1 - Intermediate'), ('B2', 'B2 - Upper Intermediate'), ('C1', 'C1 - Advanced'), ('C2', 'C2 - Proficiency')], help_text='Target difficulty level for this test', max_length=2)),
                ('questions_count', models.PositiveIntegerField(default=20, help_text='Number of questions in the test', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(50)])),
                ('time_limit_minutes', models.PositiveIntegerField(default=30, help_text='Time limit in minutes', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(120)])),
                ('pass_threshold', models.PositiveIntegerField(default=90, help_text='Required percentage to pass (50-100)', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(100)])),
                ('excellent_threshold', models.PositiveIntegerField(default=95, help_text='Excellent score threshold for special rewards', validators=[django.core.validators.MinValueValidator(70), django.core.validators.MaxValueValidator(100)])),
                ('skip_entire_track', models.BooleanField(default=False, help_text='Skip entire track if passed (for major placement tests)')),
                ('question_selection_strategy', models.CharField(choices=[('random', 'Random Selection'), ('difficulty_balanced', 'Difficulty Balanced'), ('comprehensive', 'Comprehensive Coverage'), ('adaptive', 'Adaptive Selection')], default='difficulty_balanced', help_text='Strategy for selecting questions', max_length=30)),
                ('xp_reward', models.PositiveIntegerField(default=100, help_text='XP reward for passing the test')),
                ('badge_name', models.CharField(blank=True, help_text='Badge name for passing the test', max_length=100)),
                ('badge_description', models.TextField(blank=True, help_text='Badge description')),
                ('is_active', models.BooleanField(default=True, help_text='Is test active?')),
                ('is_required', models.BooleanField(default=False, help_text='Is this test required to proceed?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('covers_groups', models.ManyToManyField(blank=True, help_text='Groups that this test covers', related_name='placement_tests_cover', to='groups.group')),
                ('covers_levels', models.ManyToManyField(blank=True, help_text='Specific levels that this test covers', related_name='placement_tests_cover', to='levels.level')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_placement_tests', to=settings.AUTH_USER_MODEL)),
                ('skip_to_group', models.ForeignKey(blank=True, help_text='Group to unlock if test is passed', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='placement_tests_unlock', to='groups.group')),
                ('skip_to_level', models.ForeignKey(blank=True, help_text='Specific level to skip to if test is passed', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='placement_tests_unlock', to='levels.level')),
            ],
            options={
                'verbose_name': 'Placement Test',
                'verbose_name_plural': 'Placement Tests',
                'ordering': ['test_type', 'difficulty_level'],
            },
        ),
        migrations.CreateModel(
            name='PlacementTestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned'), ('timeout', 'Timeout')], default='in_progress', help_text='Status of the attempt', max_length=20)),
                ('score', models.PositiveIntegerField(default=0, help_text='Score achieved')),
                ('total_questions', models.PositiveIntegerField(default=0, help_text='Total questions')),
                ('correct_answers', models.PositiveIntegerField(default=0, help_text='Correct answers')),
                ('percentage', models.FloatField(default=0.0, help_text='Percentage score')),
                ('passed', models.BooleanField(default=False, help_text='Did user pass the test?')),
                ('excellent_score', models.BooleanField(default=False, help_text='Did user get excellent score?')),
                ('time_taken_seconds', models.PositiveIntegerField(default=0, help_text='Time taken in seconds')),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When test was started')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When test was completed', null=True)),
                ('xp_earned', models.PositiveIntegerField(default=0, help_text='XP earned')),
                ('badge_earned', models.BooleanField(default=False, help_text='Did user earn badge?')),
                ('skip_action_taken', models.BooleanField(default=False, help_text='Was skip action taken?')),
                ('skip_destination', models.CharField(blank=True, help_text='Where user was skipped to', max_length=255)),
                ('user_answers', models.JSONField(default=dict, help_text="User's answers for each question")),
                ('feedback', models.TextField(blank=True, help_text='Test feedback')),
                ('recommendations', models.TextField(blank=True, help_text='Study recommendations')),
                ('question_breakdown', models.JSONField(default=dict, help_text='Breakdown of performance by question type/topic')),
                ('weak_areas', models.JSONField(default=list, help_text='Areas where user struggled')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='placement.placementtest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='placement_test_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Placement Test Attempt',
                'verbose_name_plural': 'Placement Test Attempts',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddIndex(
            model_name='placementtest',
            index=models.Index(fields=['test_type'], name='placement_p_test_ty_b55491_idx'),
        ),
        migrations.AddIndex(
            model_name='placementtest',
            index=models.Index(fields=['difficulty_level'], name='placement_p_difficu_7fe542_idx'),
        ),
        migrations.AddIndex(
            model_name='placementtest',
            index=models.Index(fields=['is_active'], name='placement_p_is_acti_7c2bda_idx'),
        ),
        migrations.AddIndex(
            model_name='placementtestattempt',
            index=models.Index(fields=['user', 'test'], name='placement_p_user_id_c40b81_idx'),
        ),
        migrations.AddIndex(
            model_name='placementtestattempt',
            index=models.Index(fields=['started_at'], name='placement_p_started_881412_idx'),
        ),
        migrations.AddIndex(
            model_name='placementtestattempt',
            index=models.Index(fields=['status'], name='placement_p_status_58ec17_idx'),
        ),
        migrations.AddIndex(
            model_name='placementtestattempt',
            index=models.Index(fields=['passed'], name='placement_p_passed_c70bdb_idx'),
        ),
    ]
