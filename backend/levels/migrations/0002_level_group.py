# Generated by Django 5.2.7 on 2025-10-16 21:52

import django.db.models.deletion
from django.db import migrations, models


def assign_levels_to_groups(apps, schema_editor):
    """Assign existing levels to groups based on their level number"""
    Level = apps.get_model('levels', 'Level')
    Group = apps.get_model('groups', 'Group')
    
    # Get the first group to assign all existing levels to it
    try:
        default_group = Group.objects.first()
        if not default_group:
            # If no groups exist, create one
            default_group = Group.objects.create(
                name="Default Group",
                description="Default group for existing levels",
                group_number=1,
                difficulty=1,
                is_unlocked=True,
                is_active=True
            )
    except Exception as e:
        # Fallback: create a group if there's any issue
        default_group = Group.objects.create(
            name="Default Group",
            description="Default group for existing levels",
            group_number=1,
            difficulty=1,
            is_unlocked=True,
            is_active=True
        )
    
    # Assign all existing levels to the default group
    Level.objects.all().update(group=default_group)


def reverse_assign_levels_to_groups(apps, schema_editor):
    """Reverse operation - no need to do anything"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('groups', '0001_initial'),
        ('levels', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='level',
            name='group',
            field=models.ForeignKey(null=True, help_text='Group this level belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='groups.group'),
            preserve_default=False,
        ),
        migrations.RunPython(
            assign_levels_to_groups,
            reverse_assign_levels_to_groups,
        ),
        migrations.AlterField(
            model_name='level',
            name='group',
            field=models.ForeignKey(help_text='Group this level belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='groups.group'),
        ),
    ]
