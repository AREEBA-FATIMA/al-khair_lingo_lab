# Generated by Django 5.2.7 on 2025-10-21 10:44

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('groups', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Level name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Level description')),
                ('level_number', models.PositiveIntegerField(help_text='Sequential level number (1, 2, 3...)', unique=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('difficulty', models.PositiveIntegerField(choices=[(1, 'Beginner'), (2, 'Elementary'), (3, 'Intermediate'), (4, 'Upper Intermediate'), (5, 'Advanced')], default=1, help_text='Difficulty level (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('xp_reward', models.PositiveIntegerField(default=10, help_text='XP points awarded for completing this level', validators=[django.core.validators.MinValueValidator(1)])),
                ('is_active', models.BooleanField(default=True, help_text='Is this level active?')),
                ('is_unlocked', models.BooleanField(default=True, help_text='Is this level unlocked?')),
                ('is_test_level', models.BooleanField(default=False, help_text='Is this a test level (every 10th level)?')),
                ('test_questions_count', models.PositiveIntegerField(default=10, help_text='Number of questions in test (only for test levels)', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(20)])),
                ('test_pass_percentage', models.PositiveIntegerField(default=80, help_text='Required percentage to pass test', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(100)])),
                ('test_time_limit_minutes', models.PositiveIntegerField(default=15, help_text='Time limit for test in minutes', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_levels', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(help_text='Group this level belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='groups.group')),
            ],
            options={
                'verbose_name': 'Level',
                'verbose_name_plural': 'Levels',
                'ordering': ['level_number'],
            },
        ),
        migrations.CreateModel(
            name='LevelCompletion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(default=0, help_text='Score achieved')),
                ('total_questions', models.PositiveIntegerField(default=0, help_text='Total questions attempted')),
                ('correct_answers', models.PositiveIntegerField(default=0, help_text='Correct answers')),
                ('percentage', models.FloatField(default=0.0, help_text='Percentage score')),
                ('passed', models.BooleanField(default=False, help_text='Did user pass the level?')),
                ('is_test_level', models.BooleanField(default=False, help_text='Was this a test level?')),
                ('time_taken_seconds', models.PositiveIntegerField(default=0, help_text='Time taken in seconds')),
                ('started_at', models.DateTimeField(help_text='When level was started')),
                ('completed_at', models.DateTimeField(auto_now_add=True, help_text='When level was completed')),
                ('xp_earned', models.PositiveIntegerField(default=0, help_text='XP earned from this level')),
                ('user_answers', models.JSONField(default=dict, help_text="User's answers for each question")),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completions', to='levels.level')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='level_completions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Level Completion',
                'verbose_name_plural': 'Level Completions',
                'ordering': ['-completed_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='The question text')),
                ('question_type', models.CharField(choices=[('mcq', 'Multiple Choice Question'), ('text_to_speech', 'Text to Speech (Pronunciation)'), ('fill_blank', 'Fill in the Blank'), ('synonyms', 'Synonyms'), ('antonyms', 'Antonyms'), ('sentence_completion', 'Sentence Completion'), ('listening', 'Listening Comprehension'), ('reading', 'Reading Comprehension'), ('writing', 'Writing Exercise'), ('grammar', 'Grammar Exercise')], help_text='Type of question', max_length=30)),
                ('options', models.JSONField(blank=True, help_text='Options for MCQ questions (list of strings)', null=True)),
                ('correct_answer', models.JSONField(blank=True, help_text='Correct answer(s) - can be string or list', null=True)),
                ('audio_url', models.URLField(blank=True, help_text='Audio file URL for listening questions', max_length=500, null=True)),
                ('image_url', models.URLField(blank=True, help_text='Image URL for visual questions', max_length=500, null=True)),
                ('hint', models.TextField(blank=True, help_text='Hint for the question')),
                ('explanation', models.TextField(blank=True, help_text='Explanation of the correct answer')),
                ('difficulty', models.PositiveIntegerField(default=1, help_text='Question difficulty (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('xp_value', models.PositiveIntegerField(default=2, help_text='XP points for correct answer', validators=[django.core.validators.MinValueValidator(1)])),
                ('question_order', models.PositiveIntegerField(default=1, help_text='Order of question in level', validators=[django.core.validators.MinValueValidator(1)])),
                ('time_limit_seconds', models.PositiveIntegerField(default=30, help_text='Time limit for this question in seconds', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(300)])),
                ('is_active', models.BooleanField(default=True, help_text='Is this question active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_questions', to=settings.AUTH_USER_MODEL)),
                ('level', models.ForeignKey(help_text='Level this question belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='levels.level')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ['level', 'question_order'],
            },
        ),
        migrations.AddIndex(
            model_name='level',
            index=models.Index(fields=['level_number'], name='levels_leve_level_n_58ac7d_idx'),
        ),
        migrations.AddIndex(
            model_name='level',
            index=models.Index(fields=['difficulty'], name='levels_leve_difficu_9cb58a_idx'),
        ),
        migrations.AddIndex(
            model_name='level',
            index=models.Index(fields=['is_active'], name='levels_leve_is_acti_f5fae9_idx'),
        ),
        migrations.AddIndex(
            model_name='level',
            index=models.Index(fields=['is_test_level'], name='levels_leve_is_test_b2da9d_idx'),
        ),
        migrations.AddIndex(
            model_name='levelcompletion',
            index=models.Index(fields=['user', 'level'], name='levels_leve_user_id_218f4c_idx'),
        ),
        migrations.AddIndex(
            model_name='levelcompletion',
            index=models.Index(fields=['completed_at'], name='levels_leve_complet_86c35b_idx'),
        ),
        migrations.AddIndex(
            model_name='levelcompletion',
            index=models.Index(fields=['passed'], name='levels_leve_passed_743c54_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='levelcompletion',
            unique_together={('user', 'level')},
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['level', 'question_order'], name='levels_ques_level_i_963726_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['question_type'], name='levels_ques_questio_886e07_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['difficulty'], name='levels_ques_difficu_367e77_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['is_active'], name='levels_ques_is_acti_9f4d9f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together={('level', 'question_order')},
        ),
    ]
