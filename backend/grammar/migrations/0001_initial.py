# Generated by Django 5.2.7 on 2025-10-21 17:38

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GrammarRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Grammar rule name (e.g., 'Present Simple')", max_length=255, unique=True)),
                ('short_name', models.CharField(help_text="Short name for display (e.g., 'Present Simple')", max_length=100)),
                ('description', models.TextField(help_text='Brief description of the grammar rule')),
                ('difficulty_level', models.CharField(choices=[('A1', 'A1 - Beginner'), ('A2', 'A2 - Elementary'), ('B1', 'B1 - Intermediate'), ('B2', 'B2 - Upper Intermediate'), ('C1', 'C1 - Advanced'), ('C2', 'C2 - Proficiency')], default='A1', help_text='CEFR difficulty level', max_length=2)),
                ('category', models.CharField(choices=[('tenses', 'Tenses'), ('articles', 'Articles'), ('pronouns', 'Pronouns'), ('prepositions', 'Prepositions'), ('conjunctions', 'Conjunctions'), ('modals', 'Modal Verbs'), ('conditionals', 'Conditionals'), ('passive_voice', 'Passive Voice'), ('reported_speech', 'Reported Speech'), ('comparatives', 'Comparatives & Superlatives'), ('gerunds_infinitives', 'Gerunds & Infinitives'), ('relative_clauses', 'Relative Clauses'), ('subjunctive', 'Subjunctive Mood'), ('inversion', 'Inversion'), ('phrasal_verbs', 'Phrasal Verbs'), ('other', 'Other')], help_text='Grammar category', max_length=30)),
                ('rules', models.JSONField(default=list, help_text='List of grammar rules and explanations')),
                ('examples', models.JSONField(default=list, help_text='List of example sentences')),
                ('negative_examples', models.JSONField(blank=True, default=list, help_text='List of incorrect examples')),
                ('common_mistakes', models.JSONField(blank=True, default=list, help_text='Common mistakes students make with this rule')),
                ('mistake_explanations', models.JSONField(blank=True, default=list, help_text='Explanations for why mistakes are wrong')),
                ('when_to_use', models.TextField(blank=True, help_text='When to use this grammar rule')),
                ('when_not_to_use', models.TextField(blank=True, help_text='When NOT to use this grammar rule')),
                ('signal_words', models.JSONField(blank=True, default=list, help_text='Signal words that indicate this grammar rule')),
                ('practice_difficulty', models.FloatField(default=1.0, help_text='Practice difficulty score (1.0-10.0)', validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(10.0)])),
                ('question_types', models.JSONField(default=list, help_text='Question types that can test this rule')),
                ('explanation_video_url', models.URLField(blank=True, help_text='Video explanation URL', max_length=500, null=True)),
                ('audio_examples', models.JSONField(blank=True, default=list, help_text='Audio URLs for example sentences')),
                ('learning_frequency', models.PositiveIntegerField(default=0, help_text='How often this rule appears in lessons')),
                ('mastery_difficulty', models.FloatField(default=1.0, help_text='How difficult it is to master this rule', validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(10.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Is this rule active?')),
                ('is_essential', models.BooleanField(default=False, help_text='Is this an essential grammar rule?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_grammar_rules', to=settings.AUTH_USER_MODEL)),
                ('prerequisite_rules', models.ManyToManyField(blank=True, help_text='Rules that should be learned before this one', related_name='dependent_rules', to='grammar.grammarrule')),
                ('related_rules', models.ManyToManyField(blank=True, help_text='Related grammar rules', to='grammar.grammarrule')),
            ],
            options={
                'verbose_name': 'Grammar Rule',
                'verbose_name_plural': 'Grammar Rules',
                'ordering': ['difficulty_level', 'category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='GrammarProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_learned', models.BooleanField(default=False, help_text='Has user learned this rule?')),
                ('mastery_level', models.PositiveIntegerField(default=0, help_text='Mastery level (0-5, 5 = perfect mastery)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('practice_count', models.PositiveIntegerField(default=0, help_text='Number of times practiced')),
                ('correct_count', models.PositiveIntegerField(default=0, help_text='Number of correct answers')),
                ('incorrect_count', models.PositiveIntegerField(default=0, help_text='Number of incorrect answers')),
                ('first_learned_at', models.DateTimeField(blank=True, null=True)),
                ('last_practiced_at', models.DateTimeField(blank=True, null=True)),
                ('average_response_time', models.FloatField(default=0.0, help_text='Average time to answer (seconds)')),
                ('personal_difficulty', models.FloatField(default=1.0, help_text='Personal difficulty for this user', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)])),
                ('mistake_patterns', models.JSONField(blank=True, default=dict, help_text='Track specific mistake patterns for this user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grammar_progress', to=settings.AUTH_USER_MODEL)),
                ('grammar_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='grammar.grammarrule')),
            ],
            options={
                'verbose_name': 'Grammar Progress',
                'verbose_name_plural': 'Grammar Progress',
                'ordering': ['-last_practiced_at'],
            },
        ),
        migrations.AddIndex(
            model_name='grammarrule',
            index=models.Index(fields=['difficulty_level'], name='grammar_gra_difficu_b2173f_idx'),
        ),
        migrations.AddIndex(
            model_name='grammarrule',
            index=models.Index(fields=['category'], name='grammar_gra_categor_e92ee1_idx'),
        ),
        migrations.AddIndex(
            model_name='grammarrule',
            index=models.Index(fields=['is_active'], name='grammar_gra_is_acti_f3cc0f_idx'),
        ),
        migrations.AddIndex(
            model_name='grammarrule',
            index=models.Index(fields=['is_essential'], name='grammar_gra_is_esse_2092a5_idx'),
        ),
        migrations.AddIndex(
            model_name='grammarprogress',
            index=models.Index(fields=['user', 'grammar_rule'], name='grammar_gra_user_id_cce69c_idx'),
        ),
        migrations.AddIndex(
            model_name='grammarprogress',
            index=models.Index(fields=['mastery_level'], name='grammar_gra_mastery_830e12_idx'),
        ),
        migrations.AddIndex(
            model_name='grammarprogress',
            index=models.Index(fields=['is_learned'], name='grammar_gra_is_lear_680afa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='grammarprogress',
            unique_together={('user', 'grammar_rule')},
        ),
    ]
