# Generated by Django 5.2.7 on 2025-10-21 10:45

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PlantType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Plant type name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Plant description')),
                ('image_url', models.URLField(blank=True, help_text='Plant image URL', max_length=500, null=True)),
                ('max_stages', models.PositiveIntegerField(default=5, help_text='Maximum growth stages', validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(10)])),
                ('xp_per_stage', models.PositiveIntegerField(default=100, help_text='XP required per growth stage', validators=[django.core.validators.MinValueValidator(10)])),
                ('has_flowers', models.BooleanField(default=False, help_text='Does this plant have flowers?')),
                ('has_fruits', models.BooleanField(default=False, help_text='Does this plant have fruits?')),
                ('seasonal_changes', models.BooleanField(default=False, help_text='Does this plant change with seasons?')),
                ('is_active', models.BooleanField(default=True, help_text='Is this plant type available?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Plant Type',
                'verbose_name_plural': 'Plant Types',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='plants_plan_name_68ab17_idx'), models.Index(fields=['is_active'], name='plants_plan_is_acti_7211a3_idx')],
            },
        ),
        migrations.CreateModel(
            name='PlantStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage_name', models.CharField(choices=[('seed', 'Seed'), ('sprout', 'Sprout'), ('sapling', 'Sapling'), ('tree', 'Tree'), ('flowering', 'Flowering'), ('fruiting', 'Fruiting'), ('mature', 'Mature')], help_text='Stage name', max_length=20)),
                ('stage_order', models.PositiveIntegerField(default=1, help_text='Order of this stage', validators=[django.core.validators.MinValueValidator(1)])),
                ('image_url', models.URLField(blank=True, help_text='Stage image URL', max_length=500, null=True)),
                ('description', models.TextField(blank=True, help_text='Stage description')),
                ('xp_required', models.PositiveIntegerField(default=0, help_text='XP required to reach this stage', validators=[django.core.validators.MinValueValidator(0)])),
                ('levels_required', models.PositiveIntegerField(default=0, help_text='Levels required to reach this stage', validators=[django.core.validators.MinValueValidator(0)])),
                ('xp_reward', models.PositiveIntegerField(default=0, help_text='XP reward for reaching this stage', validators=[django.core.validators.MinValueValidator(0)])),
                ('badge_name', models.CharField(blank=True, help_text='Badge name for reaching this stage', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Is this stage active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plant_type', models.ForeignKey(help_text='Plant type this stage belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='stages', to='plants.planttype')),
            ],
            options={
                'verbose_name': 'Plant Stage',
                'verbose_name_plural': 'Plant Stages',
                'ordering': ['plant_type', 'stage_order'],
            },
        ),
        migrations.CreateModel(
            name='UserPlant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_level', models.PositiveIntegerField(default=1, help_text='Current level user is on', validators=[django.core.validators.MinValueValidator(1)])),
                ('total_xp', models.PositiveIntegerField(default=0, help_text='Total XP earned for this plant')),
                ('levels_completed', models.PositiveIntegerField(default=0, help_text='Total levels completed')),
                ('is_healthy', models.BooleanField(default=True, help_text='Is plant healthy?')),
                ('is_wilting', models.BooleanField(default=False, help_text='Is plant wilting?')),
                ('health_points', models.PositiveIntegerField(default=100, help_text='Plant health points (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('last_care_date', models.DateField(blank=True, help_text='Last date plant was cared for', null=True)),
                ('daily_care_streak', models.PositiveIntegerField(default=0, help_text='Consecutive days of care')),
                ('max_care_streak', models.PositiveIntegerField(default=0, help_text='Maximum care streak achieved')),
                ('has_flowers', models.BooleanField(default=False, help_text='Does plant have flowers?')),
                ('has_fruits', models.BooleanField(default=False, help_text='Does plant have fruits?')),
                ('seasonal_theme', models.CharField(blank=True, help_text='Current seasonal theme', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last time plant was updated')),
                ('current_stage', models.ForeignKey(help_text='Current growth stage', on_delete=django.db.models.deletion.CASCADE, related_name='user_plants', to='plants.plantstage')),
                ('plant_type', models.ForeignKey(help_text='Type of plant', on_delete=django.db.models.deletion.CASCADE, related_name='user_plants', to='plants.planttype')),
                ('user', models.OneToOneField(help_text='User who owns this plant', on_delete=django.db.models.deletion.CASCADE, related_name='plant', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Plant',
                'verbose_name_plural': 'User Plants',
            },
        ),
        migrations.CreateModel(
            name='PlantCareLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('water', 'Watered'), ('fertilize', 'Fertilized'), ('prune', 'Pruned'), ('repot', 'Repotted'), ('check', 'Health Check'), ('play', 'Played with Plant')], help_text='Care action performed', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Care description')),
                ('health_change', models.IntegerField(default=0, help_text='Health points change')),
                ('xp_earned', models.PositiveIntegerField(default=0, help_text='XP earned from this action')),
                ('performed_at', models.DateTimeField(auto_now_add=True)),
                ('user_plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='care_logs', to='plants.userplant')),
            ],
            options={
                'verbose_name': 'Plant Care Log',
                'verbose_name_plural': 'Plant Care Logs',
                'ordering': ['-performed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='plantstage',
            index=models.Index(fields=['plant_type', 'stage_order'], name='plants_plan_plant_t_890a4a_idx'),
        ),
        migrations.AddIndex(
            model_name='plantstage',
            index=models.Index(fields=['stage_name'], name='plants_plan_stage_n_1a5fbd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='plantstage',
            unique_together={('plant_type', 'stage_order')},
        ),
        migrations.AddIndex(
            model_name='userplant',
            index=models.Index(fields=['user'], name='plants_user_user_id_850e8a_idx'),
        ),
        migrations.AddIndex(
            model_name='userplant',
            index=models.Index(fields=['plant_type'], name='plants_user_plant_t_858d07_idx'),
        ),
        migrations.AddIndex(
            model_name='userplant',
            index=models.Index(fields=['current_stage'], name='plants_user_current_0150ef_idx'),
        ),
        migrations.AddIndex(
            model_name='userplant',
            index=models.Index(fields=['is_healthy'], name='plants_user_is_heal_3b0519_idx'),
        ),
        migrations.AddIndex(
            model_name='userplant',
            index=models.Index(fields=['last_care_date'], name='plants_user_last_ca_cf2194_idx'),
        ),
        migrations.AddIndex(
            model_name='plantcarelog',
            index=models.Index(fields=['user_plant', 'performed_at'], name='plants_plan_user_pl_14bb8b_idx'),
        ),
        migrations.AddIndex(
            model_name='plantcarelog',
            index=models.Index(fields=['action'], name='plants_plan_action_abb462_idx'),
        ),
    ]
