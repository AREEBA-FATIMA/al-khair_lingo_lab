# Generated by Django 5.2.7 on 2025-10-21 10:44

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Group name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Group description')),
                ('group_number', models.PositiveIntegerField(help_text='Sequential group number', unique=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('difficulty', models.PositiveIntegerField(choices=[(1, 'Beginner'), (2, 'Elementary'), (3, 'Intermediate'), (4, 'Upper Intermediate'), (5, 'Advanced')], default=1, help_text='Group difficulty level', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_unlocked', models.BooleanField(default=False, help_text='Is group unlocked?')),
                ('unlock_condition', models.CharField(choices=[('complete_previous', 'Complete Previous Group'), ('test_100_percent', 'Pass Test with 100%'), ('both', 'Both Conditions'), ('level_requirement', 'Complete Specific Level')], default='complete_previous', help_text='Condition to unlock this group', max_length=20)),
                ('required_level', models.PositiveIntegerField(blank=True, help_text='Required level to unlock (if level_requirement)', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('test_questions', models.PositiveIntegerField(default=10, help_text='Questions in unlock test', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(20)])),
                ('pass_percentage', models.PositiveIntegerField(default=100, help_text='Required percentage to pass unlock test', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(100)])),
                ('xp_reward', models.PositiveIntegerField(default=100, help_text='XP reward for completing group', validators=[django.core.validators.MinValueValidator(1)])),
                ('badge_name', models.CharField(blank=True, help_text='Badge name for completing group', max_length=100)),
                ('badge_description', models.TextField(blank=True, help_text='Badge description')),
                ('is_active', models.BooleanField(default=True, help_text='Is group active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
                'ordering': ['group_number'],
            },
        ),
        migrations.CreateModel(
            name='GroupProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_unlocked', models.BooleanField(default=False, help_text='Is group unlocked for user?')),
                ('is_completed', models.BooleanField(default=False, help_text='Is group completed?')),
                ('completion_percentage', models.FloatField(default=0.0, help_text='Completion percentage', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('levels_completed', models.PositiveIntegerField(default=0, help_text='Levels completed in this group')),
                ('total_xp_earned', models.PositiveIntegerField(default=0, help_text='Total XP earned in this group')),
                ('time_spent_minutes', models.PositiveIntegerField(default=0, help_text='Time spent in this group (minutes)')),
                ('unlock_test_passed', models.BooleanField(default=False, help_text='Did user pass unlock test?')),
                ('unlock_test_attempts', models.PositiveIntegerField(default=0, help_text='Number of unlock test attempts')),
                ('best_unlock_test_score', models.FloatField(default=0.0, help_text='Best unlock test score')),
                ('unlocked_at', models.DateTimeField(blank=True, help_text='When group was unlocked', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When group was completed', null=True)),
                ('last_accessed_at', models.DateTimeField(blank=True, help_text='Last time group was accessed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='groups.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Group Progress',
                'verbose_name_plural': 'Group Progress',
                'ordering': ['group__group_number'],
            },
        ),
        migrations.CreateModel(
            name='GroupUnlockTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Test name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Test description')),
                ('questions_count', models.PositiveIntegerField(default=10, help_text='Number of questions in test', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(20)])),
                ('pass_percentage', models.PositiveIntegerField(default=100, help_text='Required percentage to pass', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(100)])),
                ('time_limit_minutes', models.PositiveIntegerField(default=30, help_text='Time limit in minutes', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(120)])),
                ('xp_reward', models.PositiveIntegerField(default=50, help_text='XP reward for passing test', validators=[django.core.validators.MinValueValidator(1)])),
                ('is_active', models.BooleanField(default=True, help_text='Is test active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_unlock_tests', to=settings.AUTH_USER_MODEL)),
                ('group', models.OneToOneField(help_text='Group this test unlocks', on_delete=django.db.models.deletion.CASCADE, related_name='unlock_test', to='groups.group')),
            ],
            options={
                'verbose_name': 'Group Unlock Test',
                'verbose_name_plural': 'Group Unlock Tests',
            },
        ),
        migrations.CreateModel(
            name='GroupUnlockTestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(default=0, help_text='Score achieved')),
                ('total_questions', models.PositiveIntegerField(default=0, help_text='Total questions')),
                ('correct_answers', models.PositiveIntegerField(default=0, help_text='Correct answers')),
                ('percentage', models.FloatField(default=0.0, help_text='Percentage score')),
                ('passed', models.BooleanField(default=False, help_text='Did user pass the test?')),
                ('time_taken_seconds', models.PositiveIntegerField(default=0, help_text='Time taken in seconds')),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When test was started')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When test was completed', null=True)),
                ('xp_earned', models.PositiveIntegerField(default=0, help_text='XP earned')),
                ('user_answers', models.JSONField(default=dict, help_text="User's answers for each question")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='groups.groupunlocktest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlock_test_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Group Unlock Test Attempt',
                'verbose_name_plural': 'Group Unlock Test Attempts',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['group_number'], name='groups_grou_group_n_5eb4bb_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['difficulty'], name='groups_grou_difficu_867c70_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['is_unlocked'], name='groups_grou_is_unlo_cd5ea1_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['is_active'], name='groups_grou_is_acti_044fa7_idx'),
        ),
        migrations.AddIndex(
            model_name='groupprogress',
            index=models.Index(fields=['user', 'group'], name='groups_grou_user_id_56a901_idx'),
        ),
        migrations.AddIndex(
            model_name='groupprogress',
            index=models.Index(fields=['is_completed'], name='groups_grou_is_comp_e13050_idx'),
        ),
        migrations.AddIndex(
            model_name='groupprogress',
            index=models.Index(fields=['completion_percentage'], name='groups_grou_complet_a53753_idx'),
        ),
        migrations.AddIndex(
            model_name='groupprogress',
            index=models.Index(fields=['unlocked_at'], name='groups_grou_unlocke_f09484_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='groupprogress',
            unique_together={('user', 'group')},
        ),
        migrations.AddIndex(
            model_name='groupunlocktest',
            index=models.Index(fields=['group'], name='groups_grou_group_i_2b0e89_idx'),
        ),
        migrations.AddIndex(
            model_name='groupunlocktest',
            index=models.Index(fields=['is_active'], name='groups_grou_is_acti_41724f_idx'),
        ),
        migrations.AddIndex(
            model_name='groupunlocktestattempt',
            index=models.Index(fields=['user', 'test'], name='groups_grou_user_id_106663_idx'),
        ),
        migrations.AddIndex(
            model_name='groupunlocktestattempt',
            index=models.Index(fields=['started_at'], name='groups_grou_started_db0332_idx'),
        ),
        migrations.AddIndex(
            model_name='groupunlocktestattempt',
            index=models.Index(fields=['passed'], name='groups_grou_passed_405054_idx'),
        ),
    ]
