# Generated by Django 5.2.7 on 2025-10-15 13:21

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DonorList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text="Donor's email address", max_length=254, unique=True)),
                ('full_name', models.CharField(help_text="Donor's full name", max_length=255)),
                ('organization', models.CharField(blank=True, help_text='Organization name', max_length=255)),
                ('contact_number', models.CharField(blank=True, help_text='Contact number', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Is donor active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Donor List',
                'verbose_name_plural': 'Donor List',
                'ordering': ['email'],
                'indexes': [models.Index(fields=['email'], name='users_donor_email_a59d65_idx'), models.Index(fields=['is_active'], name='users_donor_is_acti_6e95fd_idx')],
            },
        ),
        migrations.CreateModel(
            name='StudentList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(help_text='Unique student ID (e.g., STU001, 2024A001)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Student ID must contain only uppercase letters and numbers', regex='^[A-Z0-9]+$')])),
                ('full_name', models.CharField(help_text="Student's full name", max_length=255)),
                ('email', models.EmailField(blank=True, help_text='Optional email', max_length=254, null=True)),
                ('class_name', models.CharField(blank=True, help_text='Class/Grade', max_length=100)),
                ('school_name', models.CharField(blank=True, help_text='School name', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Is student active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Student List',
                'verbose_name_plural': 'Student List',
                'ordering': ['student_id'],
                'indexes': [models.Index(fields=['student_id'], name='users_stude_student_a1e9f8_idx'), models.Index(fields=['is_active'], name='users_stude_is_acti_8666b3_idx')],
            },
        ),
        migrations.CreateModel(
            name='TeacherList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text="Teacher's email address", max_length=254, unique=True)),
                ('full_name', models.CharField(help_text="Teacher's full name", max_length=255)),
                ('subject', models.CharField(blank=True, help_text='Subject taught', max_length=100)),
                ('department', models.CharField(blank=True, help_text='Department', max_length=100)),
                ('school_name', models.CharField(blank=True, help_text='School name', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Is teacher active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Teacher List',
                'verbose_name_plural': 'Teacher List',
                'ordering': ['email'],
                'indexes': [models.Index(fields=['email'], name='users_teach_email_1af0a5_idx'), models.Index(fields=['is_active'], name='users_teach_is_acti_25275b_idx')],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('teacher', 'Teacher'), ('admin', 'Admin'), ('donor', 'Donor')], default='student', help_text='Type of user', max_length=10)),
                ('student_id', models.CharField(blank=True, help_text='Student ID (for students only)', max_length=20, null=True, unique=True)),
                ('full_name', models.CharField(default='Unknown User', help_text='Full name', max_length=255)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number', max_length=15)),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to='profiles/')),
                ('current_streak', models.PositiveIntegerField(default=0, help_text='Current learning streak')),
                ('longest_streak', models.PositiveIntegerField(default=0, help_text='Longest learning streak')),
                ('total_xp', models.PositiveIntegerField(default=0, help_text='Total XP earned')),
                ('lessons_completed', models.PositiveIntegerField(default=0, help_text='Lessons completed')),
                ('vocabulary_learned', models.PositiveIntegerField(default=0, help_text='Vocabulary learned')),
                ('daily_goal_minutes', models.PositiveIntegerField(default=15, help_text='Daily goal in minutes')),
                ('notifications_enabled', models.BooleanField(default=True, help_text='Enable notifications')),
                ('sound_effects_enabled', models.BooleanField(default=True, help_text='Enable sound effects')),
                ('email_notifications', models.BooleanField(default=True, help_text='Enable email notifications')),
                ('is_verified', models.BooleanField(default=False, help_text='Is user verified?')),
                ('is_active', models.BooleanField(default=True, help_text='Is user active?')),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now, help_text='Last active time')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(help_text='Email address', max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('donor_list_entry', models.ForeignKey(blank=True, help_text='Reference to donor list entry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registered_donor', to='users.donorlist')),
                ('student_list_entry', models.ForeignKey(blank=True, help_text='Reference to student list entry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registered_student', to='users.studentlist')),
                ('teacher_list_entry', models.ForeignKey(blank=True, help_text='Reference to teacher list entry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registered_teacher', to='users.teacherlist')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_learning_time', models.TimeField(blank=True, help_text='Preferred learning time', null=True)),
                ('learning_style', models.CharField(blank=True, help_text='Learning style preference', max_length=50)),
                ('native_language', models.CharField(default='urdu', help_text='Native language', max_length=50)),
                ('target_level', models.PositiveIntegerField(default=10, help_text='Target level to achieve')),
                ('target_date', models.DateField(blank=True, help_text='Target completion date', null=True)),
                ('daily_goal_levels', models.PositiveIntegerField(default=1, help_text='Levels to complete per day')),
                ('total_study_time', models.PositiveIntegerField(default=0, help_text='Total study time in minutes')),
                ('average_session_time', models.PositiveIntegerField(default=0, help_text='Average session time in minutes')),
                ('favorite_exercise_type', models.CharField(blank=True, help_text='Favorite exercise type', max_length=50)),
                ('bio', models.TextField(blank=True, help_text='User bio', max_length=500)),
                ('is_public_profile', models.BooleanField(default=False, help_text='Make profile public')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='LoginLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_method', models.CharField(choices=[('student_id', 'Student ID'), ('email', 'Email')], help_text='Method used for login', max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of login', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('success', models.BooleanField(default=True, help_text='Was login successful?')),
                ('attempted_at', models.DateTimeField(auto_now_add=True, help_text='When login was attempted')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Login Log',
                'verbose_name_plural': 'Login Logs',
                'ordering': ['-attempted_at'],
                'indexes': [models.Index(fields=['user', 'attempted_at'], name='users_login_user_id_9cc4c5_idx'), models.Index(fields=['login_method'], name='users_login_login_m_446438_idx'), models.Index(fields=['success'], name='users_login_success_bb12af_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='users_user_ty_578f8f_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['student_id'], name='users_student_2d3a08_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='users_is_acti_847b48_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_verified'], name='users_is_veri_63cd6e_idx'),
        ),
    ]
